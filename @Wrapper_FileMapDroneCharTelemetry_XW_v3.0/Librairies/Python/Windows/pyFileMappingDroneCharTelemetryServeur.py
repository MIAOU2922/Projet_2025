# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyFileMappingDroneCharTelemetryServeur
else:
    import _pyFileMappingDroneCharTelemetryServeur

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class cVirtualDroneCharTelemetry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MutexBlocAccess = property(_pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_MutexBlocAccess_get, _pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_MutexBlocAccess_set)
    BatteryValue = property(_pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_BatteryValue_get, _pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_BatteryValue_set)
    DriveTime = property(_pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_DriveTime_get, _pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_DriveTime_set)
    TempC = property(_pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_TempC_get, _pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_TempC_set)
    TempF = property(_pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_TempF_get, _pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_TempF_set)
    Altitude = property(_pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_Altitude_get, _pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_Altitude_set)
    Ax = property(_pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_Ax_get, _pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_Ax_set)
    Ay = property(_pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_Ay_get, _pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_Ay_set)
    Az = property(_pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_Az_get, _pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_Az_set)
    FrontDistance = property(_pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_FrontDistance_get, _pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_FrontDistance_set)
    BackDistance = property(_pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_BackDistance_get, _pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_BackDistance_set)
    Pressure = property(_pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_Pressure_get, _pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_Pressure_set)
    DroneCharTelemetryDataPtr = property(_pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_DroneCharTelemetryDataPtr_get, _pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_DroneCharTelemetryDataPtr_set)

    def __init__(self):
        _pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_swiginit(self, _pyFileMappingDroneCharTelemetryServeur.new_cVirtualDroneCharTelemetry())
    __swig_destroy__ = _pyFileMappingDroneCharTelemetryServeur.delete_cVirtualDroneCharTelemetry

# Register cVirtualDroneCharTelemetry in _pyFileMappingDroneCharTelemetryServeur:
_pyFileMappingDroneCharTelemetryServeur.cVirtualDroneCharTelemetry_swigregister(cVirtualDroneCharTelemetry)
class cFileMappingDroneCharTelemetryServeur(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _DebugFlag):
        _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_swiginit(self, _pyFileMappingDroneCharTelemetryServeur.new_cFileMappingDroneCharTelemetryServeur(_DebugFlag))
    __swig_destroy__ = _pyFileMappingDroneCharTelemetryServeur.delete_cFileMappingDroneCharTelemetryServeur

    def OpenServer(self, NameSharedMem):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_OpenServer(self, NameSharedMem)

    def CloseServer(self):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_CloseServer(self)

    def ReadMapFileToVirtualDroneCharTelemetryStruct(self, Data):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_ReadMapFileToVirtualDroneCharTelemetryStruct(self, Data)

    def WriteVirtualDroneCharTelemetryStructToMapFile(self, Data):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_WriteVirtualDroneCharTelemetryStructToMapFile(self, Data)

    def PrintDebug(self, msg, _Return):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_PrintDebug(self, msg, _Return)

    def PrintStruct(self, Data):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_PrintStruct(self, Data)

    def getVirtualDroneCharTelemetryPtr(self):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_getVirtualDroneCharTelemetryPtr(self)

    def getDebugMode(self):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_getDebugMode(self)

    def getVirtualDroneCharTelemetryBatteryValue(self):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_getVirtualDroneCharTelemetryBatteryValue(self)

    def getVirtualDroneCharTelemetryDriveTime(self):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_getVirtualDroneCharTelemetryDriveTime(self)

    def getVirtualDroneCharTelemetryTempC(self):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_getVirtualDroneCharTelemetryTempC(self)

    def getVirtualDroneCharTelemetryTempF(self):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_getVirtualDroneCharTelemetryTempF(self)

    def getVirtualDroneCharTelemetryAltitude(self):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_getVirtualDroneCharTelemetryAltitude(self)

    def getVirtualDroneCharTelemetryAx(self):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_getVirtualDroneCharTelemetryAx(self)

    def getVirtualDroneCharTelemetryAy(self):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_getVirtualDroneCharTelemetryAy(self)

    def getVirtualDroneCharTelemetryAz(self):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_getVirtualDroneCharTelemetryAz(self)

    def getVirtualDroneCharTelemetryFrontDistance(self):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_getVirtualDroneCharTelemetryFrontDistance(self)

    def getVirtualDroneCharTelemetryBackDistance(self):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_getVirtualDroneCharTelemetryBackDistance(self)

    def getVirtualDroneCharTelemetryPressure(self):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_getVirtualDroneCharTelemetryPressure(self)

    def getVirtualDroneCharTelemetryMutexBlocAccess(self):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_getVirtualDroneCharTelemetryMutexBlocAccess(self)

    def setVirtualDroneCharTelemetryPtr(self, VTStruct):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_setVirtualDroneCharTelemetryPtr(self, VTStruct)

    def setDebugMode(self, _DebugMode):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_setDebugMode(self, _DebugMode)

    def setVirtualDroneCharTelemetryBatteryValue(self, value):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_setVirtualDroneCharTelemetryBatteryValue(self, value)

    def setVirtualDroneCharTelemetryDriveTime(self, DriveTime):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_setVirtualDroneCharTelemetryDriveTime(self, DriveTime)

    def setVirtualDroneCharTelemetryTempC(self, TempC):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_setVirtualDroneCharTelemetryTempC(self, TempC)

    def setVirtualDroneCharTelemetryTempF(self, TempF):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_setVirtualDroneCharTelemetryTempF(self, TempF)

    def setVirtualDroneCharTelemetryAltitude(self, Altitude):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_setVirtualDroneCharTelemetryAltitude(self, Altitude)

    def setVirtualDroneCharTelemetryAx(self, Ax):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_setVirtualDroneCharTelemetryAx(self, Ax)

    def setVirtualDroneCharTelemetryAy(self, Ay):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_setVirtualDroneCharTelemetryAy(self, Ay)

    def setVirtualDroneCharTelemetryAz(self, Az):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_setVirtualDroneCharTelemetryAz(self, Az)

    def setVirtualDroneCharTelemetryFrontDistance(self, FrontDistance):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_setVirtualDroneCharTelemetryFrontDistance(self, FrontDistance)

    def setVirtualDroneCharTelemetryBackDistance(self, BackDistance):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_setVirtualDroneCharTelemetryBackDistance(self, BackDistance)

    def setVirtualDroneCharTelemetryPressure(self, Pressure):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_setVirtualDroneCharTelemetryPressure(self, Pressure)

    def setVirtualDroneCharTelemetryMutexBlocAccess(self, blocaccess):
        return _pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_setVirtualDroneCharTelemetryMutexBlocAccess(self, blocaccess)

# Register cFileMappingDroneCharTelemetryServeur in _pyFileMappingDroneCharTelemetryServeur:
_pyFileMappingDroneCharTelemetryServeur.cFileMappingDroneCharTelemetryServeur_swigregister(cFileMappingDroneCharTelemetryServeur)


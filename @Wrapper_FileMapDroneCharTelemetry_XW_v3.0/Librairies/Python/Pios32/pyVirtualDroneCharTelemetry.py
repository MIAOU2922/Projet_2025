# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyVirtualDroneCharTelemetry
else:
    import _pyVirtualDroneCharTelemetry

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class cVirtualDroneCharTelemetry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MutexBlocAccess = property(_pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_MutexBlocAccess_get, _pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_MutexBlocAccess_set)
    BatteryValue = property(_pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_BatteryValue_get, _pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_BatteryValue_set)
    DriveTime = property(_pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_DriveTime_get, _pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_DriveTime_set)
    TempC = property(_pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_TempC_get, _pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_TempC_set)
    TempF = property(_pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_TempF_get, _pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_TempF_set)
    Altitude = property(_pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_Altitude_get, _pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_Altitude_set)
    Ax = property(_pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_Ax_get, _pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_Ax_set)
    Ay = property(_pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_Ay_get, _pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_Ay_set)
    Az = property(_pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_Az_get, _pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_Az_set)
    FrontDistance = property(_pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_FrontDistance_get, _pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_FrontDistance_set)
    BackDistance = property(_pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_BackDistance_get, _pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_BackDistance_set)
    Pressure = property(_pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_Pressure_get, _pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_Pressure_set)
    DroneCharTelemetryDataPtr = property(_pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_DroneCharTelemetryDataPtr_get, _pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_DroneCharTelemetryDataPtr_set)

    def __init__(self):
        _pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_swiginit(self, _pyVirtualDroneCharTelemetry.new_cVirtualDroneCharTelemetry())
    __swig_destroy__ = _pyVirtualDroneCharTelemetry.delete_cVirtualDroneCharTelemetry

# Register cVirtualDroneCharTelemetry in _pyVirtualDroneCharTelemetry:
_pyVirtualDroneCharTelemetry.cVirtualDroneCharTelemetry_swigregister(cVirtualDroneCharTelemetry)


@startuml drone_video_class

class drone {
    ' Attributs vidéo
    -Mat frame
    -VideoCapture capture
    -BufferedImage bufferedImage
    -int quality
    -int[] imgsize
    
    ' Attributs réseau
    -String addressLocalStr
    -int[] port
    -String addressBroadcast 
    -byte[] data
    -DatagramSocket socket_image
    -DatagramSocket socket_cmd
    -String text

    ' Threads
    -thread_reception_string commande
    -thread_list_dynamic_ip list_ip

    ' Méthodes 
    +drone()
    -void mainLoop()
    -byte[] encodeImageToJPEG(Mat image, int quality) 
    -void sendImageUDP(byte[] imageData, String address, int port)
    -void sendTextUDP(String text, String address, int port)
}

class thread_reception_string {
    -String messageRecu
    -DatagramSocket socket
    -byte[] buffer
    -boolean running
    
    +thread_reception_string(String name, int port)
    +void run()
    +void stopThread()
    +String getMessageRecu()
}

class thread_list_dynamic_ip {
    -List<String> client_address
    -List<String> client_time
    -String name
    -LocalDateTime clientTime
    -LocalDateTime now
    
    +thread_list_dynamic_ip(String name)
    +void run()
    +void addClient(String address, String time)
    +void removeClient(String address)
    +void updateClient(String address)
    +List<String> getClientAddress()
}

class VideoCapture {
    +boolean open(int device)
    +boolean read(Mat frame)
    +void release()
}

' Relations
drone --> VideoCapture : uses
drone --> thread_reception_string : uses
drone --> thread_list_dynamic_ip : uses

note left of drone
  La classe drone gère :
  - La capture vidéo via OpenCV
  - L'envoi des images via UDP
  - La réception des commandes
end note

note top of thread_reception_string
  Thread pour la réception
  des commandes UDP
end note

note top of thread_list_dynamic_ip
  Thread pour la gestion dynamique
  des clients connectés
end note

@enduml